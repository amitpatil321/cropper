{"version":3,"sources":["utils/config.js","utils/utils.js","components/Cropper.js","App.js","serviceWorker.js","index.js"],"names":["LINECOLOR","DRAG_RECT_SIZE","MOUSE_ARR","tl","bl","tr","br","getMouse","event","canvas","x","clientX","getBoundingClientRect","left","y","clientY","top","clear","obj","ctx","clearRect","overlay","width","height","fillStyle","fillRect","drawRect","dragPoints","arguments","length","undefined","save","beginPath","rect","setLineDash","strokeStyle","CONFIG","lineWidth","stroke","restore","globalAlpha","drawImage","imageObj","bringImageUp","_getDragPoints","getDragPoints","strokeRect","drawDragPoints","alreadyOccupied","rectangles","box","point","index","offsetLeft","offsetTop","Object","objectSpread","rectCords","cords","_rect$dragPoints","reDrawAll","forEach","each","show","uniqueId","ALPHABET","rtn","i","charAt","Math","floor","random","Cropper","state","onMouseDown","_this","currentBox","assertThisInitialized","_this$currentBox","mouseDown","boxDragging","lastX","lastY","includes","resizing","onMouseMove","rectLeft","rectTop","currBox","_obj$currentBox","style","cursor","changeCursor","onMouseUp","push","props","rectAdded","document","querySelector","addEventListener","this","getElementById","baseCtx","getContext","Image","src","onload","naturalWidth","naturalHeight","loadImage","removeEventListener","react_default","a","createElement","Fragment","id","Component","Header","Layout","Content","Sider","App","_rectAdded","setState","_hide","toConsumableArray","_this2","console","log","className","layout","background","padding","Cropper_Cropper","paddingLeft","list","itemLayout","dataSource","renderItem","item","Item","Meta","title","icon","theme","key","type","onClick","e","hot","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4132306.chunk.js","sourcesContent":["export const LINECOLOR = 'rgb(4, 247, 4)';\r\nexport const DRAG_RECT_SIZE = 8;\r\nexport const MOUSE_ARR = {\r\n    tl: 'nw-resize',\r\n    bl: 'nesw-resize',\r\n    tr: 'sw-resize',\r\n    br: 'nwse-resize'\r\n}\r\n","import * as CONFIG from '../utils/config';\r\nexport function loadImage(obj) {\r\n    obj.imageObj = new Image();\r\n    obj.imageObj.src = './pic.jpg';\r\n\r\n    let _this = obj;\r\n    obj.imageObj.onload = function () {\r\n        // set height and width equal to image\r\n        _this.canvas.width = _this.imageObj.naturalWidth;\r\n        _this.canvas.height = _this.imageObj.naturalHeight;\r\n        _this.baseCtx.drawImage(_this.imageObj, 0, 0);\r\n\r\n        // change height and width of overlay canvas same as base canvas\r\n        _this.overlay.style.left = _this.canvas.clientX;\r\n        _this.overlay.style.top = _this.canvas.clientY;\r\n\r\n        _this.overlay.width = _this.canvas.width;\r\n        _this.overlay.height = _this.canvas.height;\r\n\r\n        // Darw overlay canvas\r\n        _this.ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n        // _this.ctx.fillStyle = 'red';\r\n        _this.ctx.fillRect(0, 0, _this.canvas.width, _this.canvas.height);\r\n    };\r\n}\r\n\r\n    // Returns mouse x and y minus canvas relative position\r\nexport function getMouse(event, canvas) {\r\n    return {\r\n        x: event.clientX - canvas.getBoundingClientRect().left,\r\n        y: event.clientY - canvas.getBoundingClientRect().top\r\n    }\r\n}\r\n\r\n    // clear overlay canvas\r\nexport function clear(obj) {\r\n    obj.ctx.clearRect(0, 0, obj.overlay.width, obj.overlay.height);\r\n    obj.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n    obj.ctx.fillRect(0, 0, obj.canvas.width, obj.canvas.height);\r\n}\r\n\r\nexport function drawRect(obj, dragPoints, show = true) {\r\n    if (show) {\r\n        let { left, top, width, height } = dragPoints;\r\n        obj.ctx.save();\r\n        obj.ctx.beginPath();\r\n        obj.ctx.rect(left, top, width, height);\r\n        obj.ctx.setLineDash([4]); // Make borders dashed\r\n        obj.ctx.strokeStyle = CONFIG.LINECOLOR; // Green color\r\n        obj.ctx.lineWidth = 1; // line size\r\n        obj.ctx.stroke(); // draw\r\n        obj.ctx.restore();\r\n\r\n        // Bring image up\r\n        bringImageUp(obj, dragPoints);\r\n\r\n        // Draw drag points on rectangle\r\n        drawDragPoints(obj, dragPoints);\r\n    }\r\n}\r\n\r\nexport function drawDragPoints(obj, dragPoints) {\r\n    // Draw corner points\r\n    obj.ctx.strokeStyle = CONFIG.LINECOLOR;\r\n    let { tl, bl, br, tr } = getDragPoints(dragPoints);\r\n    // obj.ctx.strokeRect(tl.left + CONFIG.DRAG_RECT_SIZE, tl.top - 5, 30, 10); //Label\r\n\r\n    obj.ctx.strokeRect(tl.left, tl.top, tl.width, tl.height); //TL\r\n    obj.ctx.strokeRect(bl.left, bl.top, bl.width, bl.height); //BL\r\n    obj.ctx.strokeRect(br.left, br.top, br.width, br.height); //BR\r\n    obj.ctx.strokeRect(tr.left, tr.top, tr.width, tr.height); //TR\r\n}\r\n\r\nexport function bringImageUp(obj, dragPoints) {\r\n    const { left, top, width, height } = dragPoints;\r\n    obj.globalAlpha = 1;\r\n    obj.ctx.drawImage(obj.imageObj, left, top, width, height, left, top, width, height);\r\n}\r\n\r\n    // Checks if there is a rect exists at clicked point?\r\nexport function alreadyOccupied(obj, event) {\r\n    // Return false if no rect available\r\n    if (!obj.rectangles.length) return { box: -1, point: 'outside' };\r\n\r\n    for (let index = 0; index < obj.rectangles.length; index++) {\r\n        var left = event.clientX - obj.canvas.offsetLeft;\r\n        var top = event.clientY - obj.canvas.offsetTop;\r\n\r\n        // Check if click point\r\n        let rect = { ...obj.rectangles[index] };\r\n        let rectCords = rect.cords;\r\n        // Check if click is inside the box ?\r\n        if (top >= rectCords.top && top <= rectCords.top + rectCords.height && left >= rectCords.left && left <= rectCords.left + rectCords.width) {\r\n            return { box: index, point: 'inside' }; // Selected box\r\n        } else {\r\n            // Check if click is on drag points?\r\n            let { tl, bl, br, tr } = rect.dragPoints;\r\n\r\n            if (top >= tl.top && top <= tl.top + tl.height && left >= tl.left && left <= tl.left + tl.width) {\r\n                return { box: index, point: 'tl' };\r\n            } else if (top >= bl.top && top <= bl.top + bl.height && left >= bl.left && left <= bl.left + bl.width) {\r\n                return { box: index, point: 'bl' };\r\n            } else if (top >= tr.top && top <= tr.top + tr.height && left >= tr.left && left <= tr.left + bl.width) {\r\n                return { box: index, point: 'tr' };\r\n            }\r\n            else if (top >= br.top && top <= br.top + br.height && left >= br.left && left <= br.left + bl.width) {\r\n                return { box: index, point: 'br' };\r\n            }\r\n        }\r\n    }\r\n    return { box: -1, point: 'outside' };\r\n}\r\n\r\nexport function reDrawAll(obj) {\r\n    obj.rectangles.forEach((each, index) => {\r\n        drawRect(obj, each.cords, each.show);\r\n    });\r\n}\r\n\r\nexport function getDragPoints(dragPoints) {\r\n    if (dragPoints) {\r\n        let { left, top, width, height } = dragPoints;\r\n        let boxSize = CONFIG.DRAG_RECT_SIZE;\r\n        return {\r\n            tl: { left: left - boxSize / 2, top: top - boxSize / 2, width: boxSize, height: boxSize },\r\n            bl: { left: left - boxSize / 2, top: (top + height) - boxSize / 2, width: boxSize, height: boxSize },\r\n            br: { left: (left + width) - boxSize / 2, top: (height + top) - boxSize / 2, width: boxSize, height: boxSize },\r\n            tr: { left: (left + width) - boxSize / 2, top: (top - boxSize) + boxSize / 2, width: boxSize, height: boxSize },\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeCursor(obj) {\r\n    let { box, point } = obj.currentBox;\r\n    if (box !== -1 && point !== 'inside') {\r\n        obj.overlay.style.cursor = CONFIG.MOUSE_ARR[point];\r\n    } else if (box !== -1 && point === 'inside') {\r\n        obj.overlay.style.cursor = \"move\";\r\n    } else\r\n        obj.overlay.style.cursor = \"initial\";\r\n}\r\n\r\nexport function uniqueId() {\r\n    var ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    var ID_LENGTH = 6;\r\n    var rtn = '';\r\n    for (var i = 0; i < ID_LENGTH; i++) {\r\n        rtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));\r\n    }\r\n    return rtn;\r\n}\r\n\r\n// export function onMouseUp() {\r\n//     if (isDragging) {\r\n//         rectangles.push({ cords: dragPoints, dragPoints: utils.getDragPoints({ ...dragPoints }) });\r\n//     }\r\n//     isDragging = false;\r\n//     boxDragging = false;\r\n//     sideDragging = false;\r\n//     side = null;\r\n//     dragPoints = {};\r\n// }","import React, { Component } from 'react';\r\n\r\nimport { getMouse, drawRect, loadImage, clear, reDrawAll, alreadyOccupied, getDragPoints, changeCursor } from '../utils/utils';\r\nimport './cropper.css';\r\n\r\nexport default class Cropper extends Component {\r\n    rectangles = [];\r\n    state = {\r\n        rectangles : []\r\n    }\r\n    componentDidMount() {\r\n        document.querySelector('#overlay').addEventListener('mousedown', this.onMouseDown);\r\n        document.querySelector('#overlay').addEventListener('mousemove', this.onMouseMove);\r\n        document.querySelector('#overlay').addEventListener('mouseup', this.onMouseUp);\r\n        this.canvas = document.getElementById('myCanvas');\r\n        this.overlay = document.getElementById('overlay');\r\n        this.baseCtx = this.canvas.getContext('2d');\r\n        this.ctx = this.overlay.getContext('2d');\r\n\r\n        loadImage(this);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.querySelector('#overlay').removeEventListener('mousedown', this.onMouseDown);\r\n        document.querySelector('#overlay').removeEventListener('mousemove', this.onMouseMove);\r\n        document.querySelector('#overlay').removeEventListener('mouseup', this.onMouseUp);\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        if (this.props.rectangles.length) {\r\n            this.rectangles = this.props.rectangles;\r\n            clear(this);\r\n            reDrawAll(this);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onMouseDown = (event) => {\r\n        this.currentBox = alreadyOccupied(this, event);\r\n        let { box, point } = this.currentBox;\r\n        if (box === -1 && point === 'outside') {\r\n            this.mouseDown = true;\r\n            this.dragPoints = {};\r\n            this.dragPoints.left = getMouse(event, this.canvas).x;\r\n            this.dragPoints.top = getMouse(event, this.canvas).y;\r\n        } else if (box !== -1 && point === 'inside') {\r\n            this.boxDragging = true;\r\n            // Get initial points from where dragging started\r\n            this.lastX = event.clientX;\r\n            this.lastY = event.clientY;\r\n        } else if (box !== -1 && ['inside', 'outside'].includes(point) === false) {\r\n            this.resizing = true;\r\n            this.lastX = event.clientX;\r\n            this.lastY = event.clientY;\r\n        }\r\n    }\r\n    onMouseMove = (event) => {\r\n        if (this.mouseDown) {\r\n            clear(this)\r\n            this.dragPoints.width = getMouse(event, this.canvas).x - this.dragPoints.left;\r\n            this.dragPoints.height = getMouse(event, this.canvas).y - this.dragPoints.top;\r\n\r\n            // this.rectangles.dragPoints = utils.getDragPoints(rectangles[currentBox.box].cords);\r\n            drawRect(this, this.dragPoints);\r\n        } else if (this.boxDragging) {\r\n            let rectLeft = event.clientX - this.lastX;\r\n            let rectTop = event.clientY - this.lastY;\r\n            let currBox = this.rectangles[this.currentBox.box];\r\n\r\n            // Add box's current left top + mouse location\r\n            rectLeft = rectLeft + currBox.cords.left;\r\n            rectTop = rectTop + currBox.cords.top;\r\n\r\n            currBox.cords.top = rectTop;\r\n            currBox.cords.left = rectLeft;\r\n            currBox.dragPoints = getDragPoints(currBox.cords);\r\n            clear(this);\r\n            // Draw old rectangles as well as we have cleared the context\r\n            // reDrawAll(this);\r\n            // Now mouse last xy position becomes current position\r\n            this.lastX = event.clientX;\r\n            this.lastY = event.clientY;\r\n        } else if (this.resizing) {\r\n            if (this.currentBox.box !== -1) {\r\n                let rectLeft;\r\n                let rectTop;\r\n                let currBox = this.rectangles[this.currentBox.box];\r\n\r\n                // console.log(this.currentBox);\r\n                switch (this.currentBox.point) {\r\n                    case \"tl\": // top left\r\n                        rectLeft = this.lastX - event.clientX;\r\n                        rectTop = this.lastY - event.clientY;\r\n                        currBox.cords.left -= rectLeft;\r\n                        currBox.cords.top -= rectTop;\r\n                        currBox.cords.width += rectLeft;\r\n                        currBox.cords.height += rectTop;\r\n                        break;\r\n                    case \"tr\": // top right\r\n                        rectLeft = event.clientX - this.lastX;\r\n                        rectTop = this.lastY - event.clientY;\r\n                        // currBox.cords.left += rectLeft;\r\n                        currBox.cords.top -= rectTop;\r\n                        currBox.cords.width += rectLeft;\r\n                        currBox.cords.height += rectTop;\r\n                        break;\r\n                    case \"br\": // bottom right\r\n                        rectTop = event.clientY - this.lastY;\r\n                        rectLeft = event.clientX - this.lastX;\r\n                        currBox.cords.width += rectLeft;\r\n                        currBox.cords.height += rectTop;\r\n                        break;\r\n                    case \"bl\": // bottom left\r\n                        rectLeft = this.lastX - event.clientX;\r\n                        rectTop = event.clientY - this.lastY;\r\n                        currBox.cords.left -= rectLeft;\r\n                        currBox.cords.width += rectLeft;\r\n                        currBox.cords.height += rectTop;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                currBox.dragPoints = getDragPoints(currBox.cords);\r\n                this.lastX = event.clientX;\r\n                this.lastY = event.clientY;\r\n\r\n                clear(this);\r\n                reDrawAll(this);\r\n            }\r\n        }\r\n\r\n        if (this.mouseDown || this.boxDragging || this.resizing)\r\n        reDrawAll(this);\r\n\r\n        // Change cursor\r\n        this.currentBox = alreadyOccupied(this, event);\r\n        changeCursor(this);\r\n    }\r\n\r\n    onMouseUp = (event) => {\r\n        if (this.mouseDown) {\r\n            this.rectangles.push({\r\n                cords: this.dragPoints,\r\n                dragPoints: getDragPoints(this.dragPoints),\r\n                show: true\r\n            });\r\n            // this.props.rectAdded(this.rectangles)\r\n            this.props.rectAdded(this.rectangles);\r\n        }\r\n        this.mouseDown = false;\r\n        this.boxDragging = false;\r\n        this.resizing = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas id=\"myCanvas\"></canvas>\r\n                <canvas id=\"overlay\"></canvas>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import { hot } from 'react-hot-loader/root';\r\nimport React, { Component } from 'react';\r\nimport { Layout, List, Icon } from 'antd';\r\nimport Cropper from './components/Cropper';\r\n\r\nimport { uniqueId } from './utils/utils';\r\nimport './App.css';\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { Header, Content, Sider } = Layout;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    rectangles:[]\r\n  }\r\n\r\n  _rectAdded = (rectangles) => {\r\n    this.setState({ rectangles });\r\n  }\r\n\r\n  _hide = (index) => {\r\n    var rectangles = [...this.state.rectangles];\r\n    rectangles[index].show = !rectangles[index].show;\r\n    this.setState({ rectangles });\r\n  }\r\n\r\n  render() {\r\n    let { rectangles } = this.state;\r\n    console.log(rectangles);\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <Header className=\"header\">\r\n            This is header!\r\n            </Header>\r\n          <Layout>\r\n            <Sider width={100} style={{ background: '#fff' }}>\r\n            </Sider>\r\n            <Layout style={{ padding: '0' }}>\r\n              <Content className='content'>\r\n                <Cropper\r\n                  rectAdded={this._rectAdded}\r\n                  rectangles={this.state.rectangles}\r\n                />\r\n              </Content>\r\n            </Layout>\r\n            <Sider width={200} style={{ background: '#fff', paddingLeft: '5px' }}>\r\n              <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={rectangles}\r\n                renderItem={(item, index) => (\r\n                  < List.Item >\r\n                    <List.Item.Meta\r\n                      title={[\r\n                        <Icon theme={item.show ? 'twoTone' : ''} key={uniqueId()} type=\"eye\" onClick={e => this._hide(index)} />,\r\n                        \" Item \" + index,\r\n                        <Icon className=\"float-right\" key={uniqueId()} type=\"delete\" />\r\n                      ]}\r\n                  />\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </Sider>\r\n          </Layout>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}